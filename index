<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChannelGenius AI</title>
    
<script src="https://cdn.tailwindcss.com"></script>
    
<link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Apply the Inter font family */
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Custom scrollbar for a cleaner look */
        ::-webkit-scrollbar {
            width: 6px;
        }
        ::-webkit-scrollbar-track {
            background: #2d3748; /* gray-800 */
        }
        ::-webkit-scrollbar-thumb {
            background: #4a5568; /* gray-600 */
            border-radius: 3px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #718096; /* gray-500 */
        }
        /* Simple focus ring styling */
        .form-input:focus {
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.5); /* blue-500 equivalent */
            outline: none;
        }
        /* Style for the generated content blocks */
        .output-content {
            white-space: pre-wrap; /* Preserves line breaks in description */
            word-wrap: break-word;
            background-color: #1a202c; /* gray-900 */
            padding: 1rem;
            border-radius: 0.5rem;
            border: 1px solid #4a5568; /* gray-600 */
            min-height: 100px;
        }
        .output-content ul, .output-content ol {
            padding-left: 1.5rem;
            list-style-position: outside;
        }
        .output-content li {
            margin-bottom: 0.5rem;
        }
        .image-container {
            position: relative;
            width: 100%;
            padding-top: 100%; /* 1:1 Aspect Ratio */
            background-color: #2d3748; /* gray-800 */
            border-radius: 0.5rem;
            overflow: hidden;
            display: flex; /* For centering spinner/image */
            align-items: center;
            justify-content: center;
        }
        .image-container img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: contain; /* Or 'cover' depending on desired cropping */
            border-radius: 0.5rem;
        }
        .image-spinner {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-100 antialiased min-h-screen p-4 md:p-8">

    <div class="max-w-6xl mx-auto">
        
        <!-- UPDATED HEADER WITH LOGO AND NEW NAME -->
        <header class="text-center mb-10">
            <!-- Tool Logo -->
            <img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgHAydiJ569v4U5YHS8-8Smq6r-9qpnCX7IIBWIbrCmHaJ5yL9ccbOhOVBN21yKItTJdCvizCWabAXlt-tvQkCaT-t43fmeQO4dvvuZrNxw5m9MddZ91d1i8A0xkI0XZdxxMFSBEsBJWty-L0OUFNTVI8rhAr9aZWHVJkTD6oQKkCXHQOrII_kEm5b0gx4U/s320/Discover%20our%20free%20AI%20tool%20that%20generates%20everything%20you%20need%20for%20a%20successful%20YouTube%20channel%20unique%20names,%20SEO-friendly%20descriptions,%20trending%20tags,%20and%20prompts%20for%20your%20logo%20&%20banner.%20Perfect%20for%20new%20creators!.png" 
                 alt="ChannelGenius AI Logo" 
                 class="mx-auto w-24 h-24 mb-4 rounded-xl shadow-xl p-2 bg-gray-700/50 object-contain"
            >

            <h1 class="text-4xl md:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500 mb-3">
                ChannelGenius AI
            </h1>
            <p class="text-lg text-gray-300 max-w-2xl mx-auto">
                Your ultimate AI assistant for launching successful YouTube channels. Enter your idea and instantly generate optimized names, descriptions, tags, and creative branding prompts.
            </p>
        </header>

        
<form id="channel-form" class="bg-gray-800 p-6 md:p-8 rounded-2xl shadow-2xl border border-gray-700 mb-10">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                
                <div>
                    <label for="niche" class="block mb-2 text-sm font-medium text-gray-200">Channel Niche / Topic</label>
                    <input type="text" id="niche" class="form-input bg-gray-700 border border-gray-600 text-gray-100 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-3" placeholder="e.g., 'Beginner Python Tutorials'" required>
                </div>
                
                <div>
                    <label for="audience" class="block mb-2 text-sm font-medium text-gray-200">Target Audience</label>
                    <input type="text" id="audience" list="audience-list" class="form-input bg-gray-700 border border-gray-600 text-gray-100 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-3" placeholder="e.g., 'High school students and hobbyists'" required>
                    <datalist id="audience-list">
                        <option value="Beginners & Newcomers"></option>
                        <option value="Experts & Professionals"></option>
                        <option value="Students (High School)"></option>
                        <option value="Students (College)"></option>
                        <option value="Hobbyists & Enthusiasts"></option>
                        <option value="Parents & Families"></option>
                        <option value="Gamers"></option>
                        <option value="Developers & Tech Professionals"></option>
                        <option value="DIY & Craft Lovers"></option>
                        <option value="Fitness & Health Seekers"></option>
                    </datalist>
                </div>
                
                <div>
                    <label for="style" class="block mb-2 text-sm font-medium text-gray-200">Your Unique Style / Angle</label>
                    <input type="text" id="style" list="style-list" class="form-input bg-gray-700 border border-gray-600 text-gray-100 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-3" placeholder="e.g., 'Funny, fast-paced, and cinematic'" required>
                    <datalist id="style-list">
                        <option value="Funny & Comedic"></option>
                        <option value="Cinematic & High-Production"></option>
                        <option value="Fast-Paced & Energetic"></option>
                        <option value="Calm, Relaxing & ASMR"></option>
                        <option value="In-Depth & Academic"></option>
                        <option value="Quick & To-the-Point (Shorts)"></option>
                        <option value="Motivational & Inspirational"></option>
                        <option value="Raw & Unfiltered (Vlog)"></option>
                        <option value="Interactive (Livestreams, Q&A)"></option>
                    </datalist>
                </div>
            </div>
            
            <div class="text-center mt-8">
                <button type="submit" id="generate-btn" class="text-white bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg text-base px-8 py-3 transition-all duration-300 transform hover:scale-105 shadow-lg">
                    <span id="btn-text">Generate My Channel Kit</span>
                    <svg id="btn-spinner" aria-hidden="true" role="status" class="inline w-4 h-4 me-3 text-white animate-spin hidden" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="#E5E7EB"/>
                        <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0492C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentColor"/>
                    </svg>
                </button>
            </div>
        </form>

        
<div id="loading-state" class="text-center p-10 hidden">
            <svg aria-hidden="true" role="status" class="inline w-12 h-12 text-gray-600 animate-spin" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                
<path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="#4A5568"/>
                <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0492C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentColor"/>
            </svg>
            <p class="mt-4 text-lg text-gray-300">Generating your channel kit... <br> This may take a moment as the AI researches your niche.</p>
        </div>

        
<div id="results-container" class="hidden grid grid-cols-1 lg:grid-cols-2 gap-6 md:gap-8">
            
            
<div class="flex flex-col gap-6 md:gap-8">
                
                <div class="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700 relative">
                    <button class="copy-btn absolute top-5 right-5 bg-gray-600 hover:bg-gray-500 text-gray-200 text-xs font-medium px-3 py-1.5 rounded-md transition-colors" data-target="names-output">Copy</button>
                    <h2 class="text-2xl font-bold mb-4 text-blue-400">Channel Name Ideas</h2>
                    <div id="names-output" class="output-content">
                        
</div>
                </div>

                
                <div class="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700 relative">
                    <button class="copy-btn absolute top-5 right-5 bg-gray-600 hover:bg-gray-500 text-gray-200 text-xs font-medium px-3 py-1.5 rounded-md transition-colors" data-target="desc-output">Copy</button>
                    <h2 class="text-2xl font-bold mb-4 text-purple-400">Channel Description</h2>
                    <div id="desc-output" class="output-content">
                        
</div>
                </div>

                
                <div class="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700 relative">
                    <button class="copy-btn absolute top-5 right-5 bg-gray-600 hover:bg-gray-500 text-gray-200 text-xs font-medium px-3 py-1.5 rounded-md transition-colors" data-target="tags-output">Copy</button>
                    <h2 class="text-2xl font-bold mb-4 text-green-400">Channel Tags & Keywords</h2>
                    <div id="tags-output" class="output-content">
                        
</div>
                </div>
            </div>

            
<div class="flex flex-col gap-6 md:gap-8">
                
                <div class="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700 relative">
                    <button class="copy-btn absolute top-5 right-5 bg-gray-600 hover:bg-gray-500 text-gray-200 text-xs font-medium px-3 py-1.5 rounded-md transition-colors" data-target="logo-output">Copy</button>
                    <h2 class="text-2xl font-bold mb-4 text-yellow-400">Logo Creation Prompt</h2>
                    <p class="text-sm text-gray-400 mb-3">Use this prompt with an AI image generator (like Midjourney, DALL-E, or Imagen).</p>
                    <div id="logo-output" class="output-content mb-4">
                        
</div>
                    
                    <h3 class="text-xl font-bold mb-3 text-yellow-300">Generated Logo Image (1:1)</h3>
                    <div id="logo-image-container" class="image-container">
                        <svg id="logo-image-spinner" aria-hidden="true" role="status" class="image-spinner w-8 h-8 text-gray-600 animate-spin hidden" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="#4A5568"/>
                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0492C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentColor"/>
                        </svg>
                        <img id="logo-image" src="" alt="Generated Logo" class="hidden">
                    </div>
                </div>

                
                <div class="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700 relative">
                    <button class="copy-btn absolute top-5 right-5 bg-gray-600 hover:bg-gray-500 text-gray-200 text-xs font-medium px-3 py-1.5 rounded-md transition-colors" data-target="banner-output">Copy</button>
                    <h2 class="text-2xl font-bold mb-4 text-red-400">Channel Banner Prompt</h2>
                    <p class="text-sm text-gray-400 mb-3">Remember to use a 2560 x 1440 px canvas, keeping text in the 1546 x 423 px "safe area".</p>
                    <div id="banner-output" class="output-content">
                        
</div>
                </div>

                
                <div class="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700 relative">
                    <button class="copy-btn absolute top-5 right-5 bg-gray-600 hover:bg-gray-500 text-gray-200 text-xs font-medium px-3 py-1.5 rounded-md transition-colors" data-target="tips-output">Copy</button>
                    <h2 class="text-2xl font-bold mb-4 text-teal-400">Key Setup Tips & Settings</h2>
                    <div id="tips-output" class="output-content">
                        
</div>
                </div>
            </div>
        </div>
    </div>

    
<div id="message-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50 hidden transition-opacity duration-300">
        <div class="bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md text-center border border-gray-700">
            <p id="modal-message" class="text-lg text-gray-100 mb-6"></p>
            <button id="modal-close-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-medium px-6 py-2 rounded-lg transition-colors">
                Got it
            </button>
        </div>
    </div>


    <script type="module">
        // --- DOM Element Selection ---
        const channelForm = document.getElementById('channel-form');
        const generateBtn = document.getElementById('generate-btn');
        const btnText = document.getElementById('btn-text');
        const btnSpinner = document.getElementById('btn-spinner');
        const loadingState = document.getElementById('loading-state');
        const resultsContainer = document.getElementById('results-container');
        
        const nicheInput = document.getElementById('niche');
        const audienceInput = document.getElementById('audience');
        const styleInput = document.getElementById('style');

        const namesOutput = document.getElementById('names-output');
        const descOutput = document.getElementById('desc-output');
        const tagsOutput = document.getElementById('tags-output');
        const logoOutput = document.getElementById('logo-output');
        const bannerOutput = document.getElementById('banner-output');
        const tipsOutput = document.getElementById('tips-output');

        const logoImageContainer = document.getElementById('logo-image-container');
        const logoImage = document.getElementById('logo-image');
        const logoImageSpinner = document.getElementById('logo-image-spinner');

        const messageModal = document.getElementById('message-modal');
        const modalMessage = document.getElementById('modal-message');
        const modalCloseBtn = document.getElementById('modal-close-btn');

        // --- Modal Functions ---
        function showModal(message) {
            modalMessage.textContent = message;
            messageModal.classList.remove('hidden');
        }

        modalCloseBtn.addEventListener('click', () => {
            messageModal.classList.add('hidden');
        });

        // --- Clipboard Function ---
        function copyToClipboard(elementId) {
            try {
                const element = document.getElementById(elementId);
                let textToCopy = '';

                // Handle different content structures (lists vs. plain text)
                if (element.querySelector('ul') || element.querySelector('ol')) {
                    // Get text from list items
                    textToCopy = Array.from(element.querySelectorAll('li'))
                                      .map(li => li.textContent)
                                      .join('\n');
                } else if (elementId === 'tags-output') {
                    // Tags are comma-separated
                    textToCopy = element.textContent;
                } else {
                    // Standard text content
                    textToCopy = element.textContent;
                }
                
                if (textToCopy.trim() === '') {
                    showModal("Nothing to copy!");
                    return;
                }

                // Use the recommended clipboard fallback
                const textArea = document.createElement('textarea');
                textArea.value = textToCopy;
                textArea.style.position = 'fixed'; // Avoid scrolling
                textArea.style.opacity = '0';
                document.body.appendChild(textArea);
                textArea.select();
                
                document.execCommand('copy');
                
                document.body.removeChild(textArea);
                
                showModal('Copied to clipboard!');

            } catch (err) {
                console.error('Failed to copy text: ', err);
                showModal('Failed to copy. Please try again or copy manually.');
            }
        }

        // Attach copy listeners
        document.querySelectorAll('.copy-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const targetId = e.target.getAttribute('data-target');
                copyToClipboard(targetId);
                // Visual feedback on the button
                const originalText = e.target.textContent;
                e.target.textContent = 'Copied!';
                setTimeout(() => {
                    e.target.textContent = originalText;
                }, 2000);
            });
        });

        // --- Form Submission Handler ---
        channelForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const niche = nicheInput.value.trim();
            const audience = audienceInput.value.trim();
            const style = styleInput.value.trim();

            if (!niche || !audience || !style) {
                showModal('Please fill out all three fields to get the best results.');
                return;
            }

            // Set loading state
            btnText.textContent = 'Generating...';
            btnSpinner.classList.remove('hidden');
            generateBtn.disabled = true;
            resultsContainer.classList.add('hidden');
            loadingState.classList.remove('hidden');

            // Reset image display
            logoImage.classList.add('hidden');
            logoImage.src = ''; // Clear previous image
            logoImageSpinner.classList.remove('hidden'); // Ensure image spinner is hidden before the call


            try {
                // Construct the prompt for the AI
                const userPrompt = `
                    Based on my new YouTube channel idea, generate a complete channel starter kit.
                    
                    **My Channel Details:**
                    * **Niche/Topic:** ${niche}
                    * **Target Audience:** ${audience}
                    * **Unique Style/Angle:** ${style}

                    **Instructions:**
                    Please provide a JSON object with the following structure. Use your Google Search tool to research current trends, top channels, and SEO best practices for this *specific* niche to ensure all suggestions are high-quality, relevant, and likely to succeed.

                    1.  **channelNames**: An array of 5-7 creative, catchy, and available-sounding channel names.
                    2.  **channelDescription**: A compelling, keyword-rich "About" section description (around 100-150 words). It should hook the viewer, state the channel's value proposition, and include a call-to-action (e.g., "Subscribe for new videos every week!").
                    3.  **channelTags**: An array of 15-20 relevant channel tags (keywords) that will help with discoverability. Include a mix of broad and specific terms.
                    4.  **logoPrompt**: A detailed, descriptive prompt for an AI image generator (like Midjourney or DALL-E) to create a professional logo. The prompt should specify style (e.g., minimalist, illustrative, mascot), color palette, and imagery related to the niche.
                    5.  **bannerPrompt**: A detailed prompt for an AI image generator to create a YouTube channel banner (2560x1440px). It should describe the scene, include placeholder text for the channel name and upload schedule (e.g., "New Videos Every Friday"), and match the channel's style.
                    6.  **setupTips**: An array of 5 essential, actionable setup tips and settings for a *new* channel in this *specific* niche. (e.g., "Set your channel category to 'Education'", "Create a 'Welcome' playlist for new subscribers", "Verify your account to upload custom thumbnails").
                `;

                // Call the Gemini API to get the structured text results
                const result = await callGeminiAPI(userPrompt);

                // Populate the text-based results first
                if (result) {
                    populateResults(result);
                    resultsContainer.classList.remove('hidden');

                    // Now, generate the logo image using the generated prompt
                    // Show the image spinner while we wait for the logo
                    logoImageSpinner.classList.remove('hidden'); 
                    try {
                        const logoImageUrl = await generateImage(result.logoPrompt);
                        if (logoImageUrl) {
                            logoImage.src = logoImageUrl;
                            logoImage.classList.remove('hidden');
                        } else {
                            // Fallback message if image generation failed
                            logoImageContainer.innerHTML = `<p class="text-red-400 text-sm p-4 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full text-center">Image generation failed. Try adjusting the prompt.</p>`;
                        }
                    } catch (imageError) {
                        console.error('Error generating logo image:', imageError);
                        logoImageContainer.innerHTML = `<p class="text-red-400 text-sm p-4 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full text-center">Image generation service error.</p>`;
                    } finally {
                        logoImageSpinner.classList.add('hidden'); // Hide image spinner regardless of success
                    }

                } else {
                    throw new Error("Received empty data from API.");
                }

            } catch (error) {
                console.error('Error during AI generation:', error);
                showModal('An error occurred while generating your channel kit. Please check the console and try again.');
            } finally {
                // Reset loading state for the main button
                btnText.textContent = 'Generate My Channel Kit';
                btnSpinner.classList.add('hidden');
                generateBtn.disabled = false;
                loadingState.classList.add('hidden');
            }
        });

        // --- Populate Results Function ---
        function populateResults(data) {
            // Channel Names
            namesOutput.innerHTML = `<ul class="list-disc list-inside">${data.channelNames.map(name => `<li class="mb-1">${name}</li>`).join('')}</ul>`;

            // Channel Description
            descOutput.textContent = data.channelDescription;

            // Channel Tags
            tagsOutput.textContent = data.channelTags.join(', ');

            // Logo Prompt
            logoOutput.textContent = data.logoPrompt;

            // Banner Prompt
            bannerOutput.textContent = data.bannerPrompt;

            // Setup Tips
            tipsOutput.innerHTML = `<ol class="list-decimal list-inside">${data.setupTips.map(tip => `<li class="mb-2">${tip}</li>`).join('')}</ol>`;
        }


        // --- Gemini API Call Functions (Text and Image) ---
        
        /**
         * Fetches data with exponential backoff.
         */
        async function fetchWithBackoff(url, options, maxRetries = 5, baseDelay = 1000) {
            let attempt = 0;
            while (attempt < maxRetries) {
                try {
                    const response = await fetch(url, options);
                    if (response.status === 429 || (response.status >= 500 && response.status <= 599)) {
                        throw new Error(`HTTP error ${response.status}`);
                    }
                    return response;
                } catch (error) {
                    attempt++;
                    if (attempt >= maxRetries) {
                        throw error;
                    }
                    const delay = baseDelay * Math.pow(2, attempt) + Math.random() * 1000;
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }

        /**
         * Calls the Gemini API for structured text content.
         */
        async function callGeminiAPI(userPrompt) {
            const apiKey = ""; 
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;

            const systemInstruction = {
                parts: [{
                    text: "You are an expert YouTube channel strategist and creative director. Your goal is to help a user create a new, successful YouTube channel. You MUST perform a deep search using the provided Google Search tool to find current trends, SEO best practices, and competitor analysis for the user's specific niche to ensure all suggestions are high-quality, relevant, and actionable. You MUST output a valid JSON object matching the provided schema."
                }]
            };

            const payload = {
                contents: [{
                    parts: [{ text: userPrompt }]
                }],
                systemInstruction: systemInstruction,
                tools: [
                    { "google_search": {} }
                ],
                generationConfig: {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "OBJECT",
                        properties: {
                            "channelNames": { type: "ARRAY", items: { type: "STRING" } },
                            "channelDescription": { type: "STRING" },
                            "channelTags": { type: "ARRAY", items: { type: "STRING" } },
                            "logoPrompt": { type: "STRING" },
                            "bannerPrompt": { type: "STRING" },
                            "setupTips": { type: "ARRAY", items: { type: "STRING" } }
                        },
                        required: ["channelNames", "channelDescription", "channelTags", "logoPrompt", "bannerPrompt", "setupTips"]
                    }
                }
            };

            try {
                const response = await fetchWithBackoff(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorBody = await response.text();
                    console.error("API Error Response:", errorBody);
                    throw new Error(`API request failed with status ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();
                
                if (result.candidates && result.candidates[0].content && result.candidates[0].content.parts[0].text) {
                    const jsonText = result.candidates[0].content.parts[0].text;
                    return JSON.parse(jsonText);
                } else {
                    console.error("Invalid API response structure:", result);
                    if (result.promptFeedback) {
                        showModal(`Generation failed due to: ${result.promptFeedback.blockReason || 'Unknown error'}. Please adjust your inputs.`);
                    }
                    throw new Error("Invalid API response structure. No content found.");
                }

            } catch (error) {
                console.error("Error in callGeminiAPI:", error);
                throw error;
            }
        }

        /**
         * Calls the Image Generation API (imagen-3.0-generate-002).
         */
        async function generateImage(prompt) {
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;

            // We enforce 1:1 aspect ratio for a logo
            const fullPrompt = `${prompt}, minimalist, sharp focus, professional logo design, no text, clean background`;

            const payload = { 
                instances: { prompt: fullPrompt }, 
                parameters: { 
                    "sampleCount": 1,
                    "aspectRatio": "1:1"
                } 
            };
            
            try {
                const response = await fetchWithBackoff(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    throw new Error(`Image API failed with status ${response.status}`);
                }

                const result = await response.json();
                
                if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {
                    // Prepend the data URL prefix
                    return `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;
                } else {
                    console.error("Invalid Image API response structure:", result);
                    return null;
                }
            } catch (error) {
                console.error("Error in generateImage:", error);
                throw error;
            }
        }

    </script>
</body>
</html>
